#include <ArduinoMqttClient.h>
#include <WiFiNINA.h>
#include <BH1750.h>
#include <LiquidCrystal.h>
#include <Wire.h>

BH1750 lightMeter;

const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

///////please enter your sensitive data in the Secret tab/arduino_secrets.h
char ssid[] = "NETHI";
char pass[] = "nethaki2001";  // your network password (use for WPA, or use as key for WEP)
float Distance = 0.0;

// Define the analog pin for soil moisture sensor
const int soilMoisturePin = A0;
int soilMoistureValue = 0;

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

const char broker[] = "broker.emqx.io";
int port = 1883;
const char Topic[] = "SIT210/project2";

//set interval for sending messages (milliseconds)
const long interval = 8000;
unsigned long previousMillis = 0;

int count = 0;

void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ;  // wait for serial port to connect. Needed for native USB port only
  }

  Wire.begin();
  lightMeter.begin();
  Serial.println(F("BH1750 Test begin"));


  // attempt to connect to Wifi network:
  Serial.print("Attempting to connect to WPA SSID: ");
  Serial.println(ssid);
  lcd.setCursor(0, 1);
  lcd.print("Connecting to WIFI");
  while (WiFi.begin(ssid, pass) != WL_CONNECTED) {
    // failed, retry
    Serial.print(".");
    delay(5000);
  }

  Serial.println("You're connected to the network");
  lcd.setCursor(0, 1);
  lcd.print("WIFI Connected");
  Serial.println();

  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);

  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());

    while (1)
      ;
  }

  Serial.println("You're connected to the MQTT broker!");
  Serial.println();
  lcd.setCursor(0, 1);
  lcd.print("Ready!          ");
  
}

void loop() {
  // call poll() regularly to allow the library to send MQTT keep alive which
  // avoids being disconnected by the broker
  mqttClient.poll();

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time a message was sent
    previousMillis = currentMillis;

    float lux = lightMeter.readLightLevel();
    Serial.print("Light: ");
    Serial.print(lux);
    Serial.println(" lx");

    Serial.println("Soil Moisture Sensor Reading...");

    soilMoistureValue = analogRead(soilMoisturePin);

    Serial.print("Soil Moisture Value: ");
    Serial.println(soilMoistureValue);
    lcd.setCursor(0, 1);
    lcd.print(soilMoistureValue + "             ");

    if (soilMoistureValue > 600 && lux > 10) {
      Serial.print("Sending message to topic: ");
      Serial.println(Topic);
      lcd.setCursor(0, 1);
      lcd.print(" Soil is Dry   ");

      // send message, the Print interface can be used to set the message contents
      mqttClient.beginMessage(Topic);
      mqttClient.print("Activate the pump");
      mqttClient.endMessage();
    } 

    Serial.println();
  }
}
